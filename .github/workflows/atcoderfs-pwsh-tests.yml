name: Test PowerShell on Ubuntu
on: push

jobs:
  pester-test:
    name: Pester test
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-AngleParse-PSScriptAnalyzer
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module AngleParse, PSScriptAnalyzer -ErrorAction Stop
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path src/AtcoderFs.Pwsh  -Recurse -Outvariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }
      - name: Run Pester
        shell: pwsh
        run: |
          $config = @{
              Run          = @{
                  Path = "tests/AtcoderFs.Pwsh.Tests"
              }
              TestResult   = @{
                  Enabled = $true
                  OutputPath = "testresults/AtcoderFs.Pwsh.Tests.xml"
              }
              CodeCoverage = @{
                  Enabled = $true
                  Path    = "src/AtcoderFs.Pwsh"
                  OutputPath = "testresults/AtcoderFs.Pwsh.CodeCoverage.xml"
              }
          }
          Invoke-Pester -Configuration $config
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: testresults
          path: testresults
    if: ${{ always() }}